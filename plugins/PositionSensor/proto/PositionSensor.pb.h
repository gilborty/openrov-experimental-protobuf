/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.6-dev at Thu Jun 16 18:00:23 2016. */

#ifndef PB_POSITIONSENSOR_PB_H_INCLUDED
#define PB_POSITIONSENSOR_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#include "ROVMessage.h"

/* Struct definitions */
typedef struct _PositionSensorCommand {
    int32_t command;
/* @@protoc_insertion_point(struct:PositionSensorCommand) */
} PositionSensorCommand;

typedef struct _PositionSensorStatus {
    int32_t status;
/* @@protoc_insertion_point(struct:PositionSensorStatus) */
} PositionSensorStatus;

typedef struct _PositionSensorTelemetry {
    int32_t x;
    int32_t y;
/* @@protoc_insertion_point(struct:PositionSensorTelemetry) */
} PositionSensorTelemetry;

typedef struct _PositionSensor {
    int32_t pid;
    pb_size_t which_payload;
    union {
        PositionSensorStatus status;
        PositionSensorCommand command;
        PositionSensorTelemetry telemetry;
    } payload;
/* @@protoc_insertion_point(struct:PositionSensor) */
} PositionSensor;

/* Default values for struct fields */

/* Initializer values for message structs */
#define PositionSensorTelemetry_init_default     {0, 0}
#define PositionSensorCommand_init_default       {0}
#define PositionSensorStatus_init_default        {0}
#define PositionSensor_init_default              {0, 0, {PositionSensorStatus_init_default}}
#define PositionSensorTelemetry_init_zero        {0, 0}
#define PositionSensorCommand_init_zero          {0}
#define PositionSensorStatus_init_zero           {0}
#define PositionSensor_init_zero                 {0, 0, {PositionSensorStatus_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define PositionSensorCommand_command_tag        1
#define PositionSensorStatus_status_tag          1
#define PositionSensorTelemetry_x_tag            1
#define PositionSensorTelemetry_y_tag            2
#define PositionSensor_status_tag                2
#define PositionSensor_command_tag               3
#define PositionSensor_telemetry_tag             4
#define PositionSensor_pid_tag                   1

/* Struct field encoding specification for nanopb */
extern const pb_field_t PositionSensorTelemetry_fields[3];
extern const pb_field_t PositionSensorCommand_fields[2];
extern const pb_field_t PositionSensorStatus_fields[2];
extern const pb_field_t PositionSensor_fields[5];

/* Maximum encoded size of messages (where known) */
#define PositionSensorTelemetry_size             10
#define PositionSensorCommand_size               5
#define PositionSensorStatus_size                5
#define PositionSensor_size                      17

/*Class definitions for messages */
class PositionSensorTelemetryMessage : public ROVMessage 
{ 
	public: 
		PositionSensorTelemetryMessage()
		:data(PositionSensorTelemetry_init_zero)
		{

		};

		PositionSensorTelemetryMessage(const PositionSensorTelemetry& messageIn)
		 : data(messageIn)
		{

		};

		size_t GetSize()
		{
			 return m_size; 
		};

		const pb_field_t* GetFields()
		{
			return m_kpDataFields;
		};

		PositionSensorTelemetry data; 

	private: 
		size_t m_size			 = PositionSensorTelemetry_size;
		const pb_field_t* m_kpDataFields = PositionSensorTelemetry_fields;
};

class PositionSensorCommandMessage : public ROVMessage 
{ 
	public: 
		PositionSensorCommandMessage()
		:data(PositionSensorCommand_init_zero)
		{

		};

		PositionSensorCommandMessage(const PositionSensorCommand& messageIn)
		 : data(messageIn)
		{

		};

		size_t GetSize()
		{
			 return m_size; 
		};

		const pb_field_t* GetFields()
		{
			return m_kpDataFields;
		};

		PositionSensorCommand data; 

	private: 
		size_t m_size			 = PositionSensorCommand_size;
		const pb_field_t* m_kpDataFields = PositionSensorCommand_fields;
};

class PositionSensorStatusMessage : public ROVMessage 
{ 
	public: 
		PositionSensorStatusMessage()
		:data(PositionSensorStatus_init_zero)
		{

		};

		PositionSensorStatusMessage(const PositionSensorStatus& messageIn)
		 : data(messageIn)
		{

		};

		size_t GetSize()
		{
			 return m_size; 
		};

		const pb_field_t* GetFields()
		{
			return m_kpDataFields;
		};

		PositionSensorStatus data; 

	private: 
		size_t m_size			 = PositionSensorStatus_size;
		const pb_field_t* m_kpDataFields = PositionSensorStatus_fields;
};

class PositionSensorMessage : public ROVMessage 
{ 
	public: 
		PositionSensorMessage()
		:data(PositionSensor_init_zero)
		{

		};

		PositionSensorMessage(const PositionSensor& messageIn)
		 : data(messageIn)
		{

		};

		size_t GetSize()
		{
			 return m_size; 
		};

		const pb_field_t* GetFields()
		{
			return m_kpDataFields;
		};

		PositionSensor data; 

	private: 
		size_t m_size			 = PositionSensor_size;
		const pb_field_t* m_kpDataFields = PositionSensor_fields;
};


/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define POSITIONSENSOR_MESSAGES \


#endif

/* @@protoc_insertion_point(eof) */

#endif
